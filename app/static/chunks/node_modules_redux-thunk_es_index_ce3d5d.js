(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_redux-thunk_es_index_ce3d5d.js", {

"[project]/node_modules/redux-thunk/es/index.js (ecmascript)": (({ r: __turbopack_require__, f: __turbopack_require_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, l: __turbopack_load__, j: __turbopack_dynamic__, g: global, __dirname, k: __turbopack_refresh__ }) => (() => {

/** A function that accepts a potential "extra argument" value to be injected later,
 * and returns an instance of the thunk middleware that uses that value
 */ __turbopack_esm__({
    "default": ()=>__TURBOPACK__default__export__
});
function createThunkMiddleware(extraArgument) {
    // Standard Redux middleware definition pattern:
    // See: https://redux.js.org/tutorials/fundamentals/part-4-store#writing-custom-middleware
    var middleware = function middleware(_ref) {
        var dispatch = _ref.dispatch, getState = _ref.getState;
        return function(next) {
            return function(action) {
                // The thunk middleware looks for any functions that were passed to `store.dispatch`.
                // If this "action" is really a function, call it and return the result.
                if (typeof action === 'function') {
                    // Inject the store's `dispatch` and `getState` methods, as well as any "extra arg"
                    return action(dispatch, getState, extraArgument);
                } // Otherwise, pass the action down the middleware chain as usual
                return next(action);
            };
        };
    };
    return middleware;
}
var thunk = createThunkMiddleware(); // Attach the factory function so users can create a customized version
// with whatever "extra arg" they want to inject into their thunks
thunk.withExtraArgument = createThunkMiddleware;
const __TURBOPACK__default__export__ = thunk;

})()),
}]);

//# sourceMappingURL=node_modules_redux-thunk_es_index_ce3d5d.js.map