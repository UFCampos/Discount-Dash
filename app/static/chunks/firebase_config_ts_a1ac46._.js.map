{
  "version": 3,
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/firebase/config.ts"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\nimport { getStorage, ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\r\n\r\nconst { v4: uuidv4 } = require('uuid');\r\nconst firebaseConfig = {\r\n    apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\r\n    authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\r\n    projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\r\n    appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\r\n    measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID\r\n};\r\n\r\nexport const app = initializeApp(firebaseConfig)\r\n\r\nexport const auth = getAuth(app)\r\n\r\nexport const db = getFirestore(app)\r\n\r\nexport const storage=getStorage(app)\r\n\r\nexport const uploadFile=async (file:any)=>{\r\n    const storageRef=ref(storage, uuidv4())\r\n    await uploadBytes(storageRef, file)\r\n    const url=await getDownloadURL(storageRef)\r\n    return url\r\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAKA,MAAM,EAAE,IAAI,MAAM,EAAE,GAAG;AACvB,MAAM,iBAAiB;IACnB,QAAQ,qJAAQ,GAAG,CAAC,4BAA4B;IAChD,YAAY,qJAAQ,GAAG,CAAC,gCAAgC;IACxD,WAAW,qJAAQ,GAAG,CAAC,+BAA+B;IACtD,eAAe,qJAAQ,GAAG,CAAC,mCAAmC;IAC9D,mBAAmB,qJAAQ,GAAG,CAAC,wCAAwC;IACvE,OAAO,qJAAQ,GAAG,CAAC,2BAA2B;IAC9C,eAAe,qJAAQ,GAAG,CAAC,mCAAmC;AAClE;AAEO,MAAM,MAAM,4JAAc;AAE1B,MAAM,OAAO,uJAAQ;AAErB,MAAM,KAAK,iKAAa;AAExB,MAAM,UAAQ,6JAAW;AAEzB,MAAM,aAAW,OAAO;IAC3B,MAAM,aAAW,sJAAI,SAAS;IAC9B,MAAM,8JAAY,YAAY;IAC9B,MAAM,MAAI,MAAM,iKAAe;IAC/B,OAAO;AACX"}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}